server:
  port: 8080

spring:
  application:
    name: payment-processing-platform
  
  # Production Database Configuration
  datasource:
    url: jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:payment_db}?useSSL=true&requireSSL=true&verifyServerCertificate=false
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 50
      minimum-idle: 10
      connection-timeout: 30000
      idle-timeout: 300000
      max-lifetime: 900000
      leak-detection-threshold: 60000
  
  # JPA Configuration for Production
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        jdbc:
          batch_size: 50
        order_inserts: true
        order_updates: true
        generate_statistics: false
  
  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD}
      timeout: 5000ms
      lettuce:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5
  
  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 5
      batch-size: 32768
      linger-ms: 10
      compression-type: snappy
    consumer:
      group-id: payment-service-prod
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: false
      properties:
        spring.json.trusted.packages: "com.shibam.payments"

# Production Logging
logging:
  level:
    com.shibam.payments: INFO
    org.springframework.kafka: WARN
    org.hibernate: WARN
    org.springframework.security: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{traceId}] %logger{36} - %msg%n"
  file:
    name: /app/logs/payment-service.log
    max-size: 100MB
    max-history: 30

# Production Management
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: payment-processing-platform
      environment: production

# Production Payment Configuration
payment:
  gateway:
    timeout: 30000
    retry-attempts: 3
    circuit-breaker:
      enabled: true
      failure-threshold: 5
      recovery-timeout: 30000
  fraud:
    max-amount: 50000.00
    velocity-limit: 10
    ml-model:
      enabled: true
      threshold: 0.7
  notification:
    email:
      enabled: true
    sms:
      enabled: true
    kafka:
      enabled: true
  security:
    encryption:
      enabled: true
      algorithm: AES-256-GCM
    rate-limiting:
      enabled: true
      requests-per-minute: 100